Microsoft (R) Macro Assembler Version 14.14.26431.0	    06/18/19 18:57:35
workTim						     Page 1 - 1


				TITLE workTime ; 20181594 구산 
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				ReadFile PROTO, filehandle:DWORD,pBuffer:PTR BYTE, ; 입 력 버 퍼 offset offset 이 저 장된 reg 도 가 능 )
				nBufsize:DWORD,; 읽 고자 하 는 최 대 byte 수
				pBytesRead:PTR DWORD, ; 실 제 읽 은 개 수 저 장을 위 한 변 수 offset 위 와 동 일
				pOverlapped:PTR DWORD ; 무 시 (0 을 전 달 의 미가 있 지만 생 략한다
 = 00000200			BUF_SIZE = 512


 00000000			.data
 00000000 00000000		stdinHandle HANDLE ?
 00000004 00000000		stdoutHandle HANDLE ?
 00000008  00000200 [		inBuf BYTE BUF_SIZE DUP(?) ; input buf
	    00
	   ]
 00000208 00000000		bytesREAD DWORD ? ; 실 제로 읽 은 byte 개 수 저 장
 0000020C  00000200 [		outBuf BYTE BUF_SIZE DUP(?) ; output buf
	    00
	   ]
 0000040C 00000000		bytesWRITE DWORD ? ; 실 제로 쓰 여진 byte 개 수 저 장
 00000410  00000400 [		task dword 1024 dup(0) ; 과제 
	    00000000
	   ]
 00001410  00000400 [		work dword 1024 dup(0) ; 작업시간
	    00000000
	   ]
 00002410 20			blank byte ' '
 00002411 00000000		sum dword 0
 00002415 00000064		diff dword 100

 00002419 0D 0A			ent byte 0Dh, 0Ah
 00000000			.code



 00000000			main proc

				INVOKE getstdhandle, STD_OUTPUT_HANDLE
 00000007  A3 00000004 R	mov stdouthandle, eax
				INVOKE Getstdhandle, STD_INPUT_HANDLE
 00000013  A3 00000000 R	mov stdinHandle,eax
 00000018  BA 00000008 R	mov edx,offset inbuf
 0000001D  E8 000001B3		call read_a_line
 00000022  BA 00000008 R	mov edx,offset inbuf
 00000027  B9 00000002		mov ecx,2
 0000002C  E8 00000000 E	call parseinteger32
 00000031  8B C8		mov ecx,eax

 00000033			line_loop:
 00000033  51			push ecx
									;task 배열 만들기 시작 @@@@@
 00000034  C7 05 00002411 R	mov sum,0
	   00000000
 0000003E  BA 00000008 R	mov edx,offset inbuf
 00000043  A1 00000000 R	mov eax,stdinHandle
 00000048  C6 02 20		mov byte ptr [edx],' '
 0000004B  42			inc edx
 0000004C  C6 02 20		mov byte ptr [edx],' '
 0000004F  42			inc edx
 00000050  E8 00000180		call read_a_line ; edx 문자열 주소, eax 핸들 ecx 읽은 문자수
 00000055  83 F9 00		cmp ecx,0
 00000058  0F 84 00000175	je endfile
 0000005E  C6 04 0A 20		mov byte ptr [edx+ecx],' '


 00000062  BA 00000008 R	mov edx,offset inbuf

 00000067  33 DB		xor ebx,ebx ; clear reg
 00000069  33 F6		xor esi,esi; esi used for flag!
 0000006B  33 FF		xor edi,edi; to save address of array
 0000006D  83 C1 03		add ecx,3
 00000070			loopperline:;readaline에서 읽은 ecx 활용, 숫자 다음 띄어쓰기에서 숫자 읽음
 00000070  51			   push ecx
 00000071  33 C0		   xor eax,eax
 00000073  80 3C 1A 30		   cmp byte ptr [edx+ebx],'0'
 00000077  72 0D		   jb notnumber
 00000079  80 3C 1A 39		   cmp byte ptr [edx+ebx],'9'
 0000007D  77 07		   ja notnumber
 0000007F  BE 00000001		   mov esi,1
 00000084  EB 23		   jmp justbeforeloop

 00000086			   notnumber:
 00000086  83 FE 01		   cmp esi,1 
 00000089  74 02		   je callparse
 0000008B  EB 1C		   jmp justbeforeloop
				   
 0000008D			   callparse:
 0000008D  BE 00000000		   mov esi,0
 00000092  51			   push ecx
 00000093  8B CB		   mov ecx,ebx
 00000095  41			   inc ecx
 00000096  E8 00000000 E	   call parseinteger32 ; 수 하나 읽어오는 함수

 0000009B  89 87 00000410 R	   mov task[edi],eax ; 배열에 차례차례 저장, 0번째 수는 갯수!
				   
				   
 000000A1  83 C7 04		   add edi,type task

				   ; call dumpregs 디버깅용
 000000A4  59			   pop ecx
				  
 000000A5  03 D3		   add edx,ebx;
 000000A7  33 DB		   xor ebx,ebx;
				   ;add edi, type arr

 000000A9			   justbeforeloop:
 000000A9  43			      inc ebx
 000000AA  59			   pop ecx
 000000AB  E2 C3		   loop loopperline
				 
										 ;work 배열 만들기 시작@@@@
 000000AD  BA 00000008 R	mov edx,offset inbuf
 000000B2  A1 00000000 R	mov eax,stdinHandle
 000000B7  C6 02 20		mov byte ptr [edx],' '
 000000BA  42			inc edx
 000000BB  C6 02 20		mov byte ptr [edx],' '
 000000BE  42			inc edx
 000000BF  E8 00000111		call read_a_line ; edx 문자열 주소, eax 핸들 ecx 읽은 문자수
 000000C4  C6 04 0A 20		mov byte ptr [edx+ecx],' '


 000000C8  BA 00000008 R	mov edx,offset inbuf

 000000CD  33 DB		xor ebx,ebx ; clear reg
 000000CF  33 F6		xor esi,esi; esi used for flag!
 000000D1  33 FF		xor edi,edi; to save address of array
 000000D3  83 C1 03		add ecx,3
 000000D6			loopperline2:;readaline에서 읽은 ecx 활용, 숫자 다음 띄어쓰기에서 숫자 읽음
 000000D6  51			   push ecx
 000000D7  33 C0		   xor eax,eax
 000000D9  80 3C 1A 30		   cmp byte ptr [edx+ebx],'0'
 000000DD  72 0D		   jb notnumber2
 000000DF  80 3C 1A 39		   cmp byte ptr [edx+ebx],'9'
 000000E3  77 07		   ja notnumber2
 000000E5  BE 00000001		   mov esi,1
 000000EA  EB 23		   jmp justbeforeloop2

 000000EC			   notnumber2:
 000000EC  83 FE 01		   cmp esi,1 
 000000EF  74 02		   je callparse2
 000000F1  EB 1C		   jmp justbeforeloop2
				   
 000000F3			   callparse2:
 000000F3  BE 00000000		   mov esi,0
 000000F8  51			   push ecx
 000000F9  8B CB		   mov ecx,ebx
 000000FB  41			   inc ecx
 000000FC  E8 00000000 E	   call parseinteger32 ; 수 하나 읽어오는 함수
				  
 00000101  89 87 00001410 R	   mov work[edi],eax ; 배열에 차례차례 저장, 0번째 수는 갯수!
				   
				   
 00000107  83 C7 04		   add edi,type work

				   ; call dumpregs 디버깅용
 0000010A  59			   pop ecx
				  
 0000010B  03 D3		   add edx,ebx;
 0000010D  33 DB		   xor ebx,ebx;
				   ;add edi, type arr

 0000010F			   justbeforeloop2:
 0000010F  43			      inc ebx
 00000110  59			   pop ecx
 00000111  E2 C3		   loop loopperline2

				  
				  
				  ;;비교 작업 시작
 00000113  8B 0D 00000410 R	  mov ecx,task[0]
 00000119  BF 00000004		  mov edi,4 ; task index
				  
 0000011E			  taskloop:
 0000011E  51				push ecx
 0000011F  33 DB			xor ebx,ebx ; for index to make ZERO
 00000121  8B 0D 00001410 R		mov ecx, work[0]
 00000127  33 D2			xor edx,edx ; for -1
 00000129  BE 00000004			mov esi,4
 0000012E  C7 05 00002415 R		mov diff,100
	   00000064
 00000138				workloop:
 00000138  8B 86 00001410 R			mov eax,dword ptr work[esi]
 0000013E  2B 87 00000410 R			sub eax,dword ptr task[edi]
 00000144  78 10				js notnew

 00000146  39 05 00002415 R			cmp diff,eax ; diff is minimum difference
 0000014C  72 08				jb notnew
 0000014E  8B DE				mov ebx,esi
 00000150  A3 00002415 R			mov diff,eax
 00000155  42					inc edx
 00000156					notnew:

 00000156  83 C6 04				add esi,type work
 00000159  E2 DD				loop workloop
 0000015B  83 FA 00			cmp edx,0
 0000015E  74 1E			je cantfinish
					
 00000160  8B 83 00001410 R		mov eax,work[ebx] ;; TODO : -1 출력의 경우ㅡ
 00000166  01 05 00002411 R		add sum,eax
 0000016C  C7 83 00001410 R		mov work[ebx],0
	   00000000
 00000176  83 C7 04			add edi, type task
 00000179  59				pop ecx
 0000017A  E2 A2			loop taskloop

 0000017C  EB 0A		  jmp printsum

 0000017E			  cantfinish:
 0000017E  C7 05 00002411 R	  mov sum,-1
	   FFFFFFFF

 00000188			  printsum:
 00000188  A1 00002411 R	  mov eax,sum
 0000018D  BA 00000008 R	  mov edx,offset inbuf
 00000192  E8 0000007D		  call inttostr

				  invoke writefile,stdouthandle,offset inbuf,ecx,addr byteswrite,0; write int
				  invoke writefile,stdouthandle,offset ent,2,addr byteswrite,0 ; crlf
				  
				  
				  ;다 끝내고 다음 두 줄 받으러 갈 때
 000001C8  59			  pop ecx
 000001C9  49			  dec ecx
 000001CA  83 F9 00		  cmp ecx,0
 000001CD  0F 87 FFFFFE60	  ja line_loop

 000001D3			  endfile:
 000001D3  33 C0		  xor eax,eax
				  movzx ax,bx
s181594HW07.asm(217) : error A2070:invalid instruction operands
 000001D5			main ENDP

 000001D5			Read_a_Line PROC
				;; Input EAX : File Handle
				;; EDX : Buffer offset to store the string
				;; Output ECX : # of chars read(0 if none(i.e.
				;; Function
				;; Read a line from a ~.txt file until CR,
				;; CR, LF are ignored and 0 is appended at the end.
				;; ECX o nly counts valid chars just before CR.
 0000241B			.data
 0000241B 00			Single_Buf__ BYTE ? ; two underscores
 0000241C 00000000		Byte_Read__ DWORD ? ;
 000001D5			.code
 000001D5  33 C9		xor ecx, ecx ; reset counter
 000001D7			Read_Loop :
				;; Note: Win32 API functions do not preserve
				;;EAX, EBX, ECX, and EDX.
 000001D7  50			push eax ; save registers
 000001D8  51			push ecx
 000001D9  52			push edx ; read a single char
				INVOKE ReadFile , EAX, OFFSET Single_Buf__, 1, OFFSET Byte_Read__, 0
 000001EE  5A			pop edx ; restore registers
 000001EF  59			pop ecx
 000001F0  58			pop eax
 000001F1  83 3D 0000241C R	cmp DWORD PTR Byte_Read__, 0 ; check # of chars read
	   00
 000001F8  74 16		je Read_End ; if read nothing, return
				;; Each end of line consists of CR and then LF
 000001FA  8A 1D 0000241B R	mov bl, Single_Buf__ ; load the char
 00000200  80 FB 0D		cmp bl, 0dh
 00000203  74 D2		je Read_Loop ; if CR, read once more
 00000205  80 FB 0A		cmp bl, 0ah
 00000208  74 06		je Read_End ; End of line detected, return
 0000020A  88 1A		mov [edx], bl ; move the char to input buf
 0000020C  42			inc edx ; ++1 buf pointer
 0000020D  41			inc ecx ; ++1 char counter
 0000020E  EB C7		jmp Read_Loop ; go to start to read the next line
 00000210			Read_End:
 00000210  C6 02 00		mov BYTE PTR [edx], 0 ; append 0 at the end
 00000213  C3			ret
 00000214			Read_a_Line ENDP


 00000214			IntToStr PROC
				;;INPUT
				;;  eax : integer to convert(32bit signed)
				;;  edx : string buffer offset
				;;OUTPUT
				;;  integer string in the buffer (EOS('\0' (== 0)) appended)
				;;  ecx : the string size (excluding 0)
 00000214  50			push eax
 00000215  53			push ebx
 00000216  52			push edx
 00000217  56			push esi
 00000218  57			push edi

 00000219  8B F0		mov esi, eax
 0000021B  8B FA		mov edi, edx

 0000021D  A9 80000000		test eax, 80000000h
 00000222  74 02		jz P1
 00000224  F7 D8		 neg eax
 00000226			P1:
 00000226  33 C9		 xor ecx, ecx
 00000228  BB 0000000A		 mov ebx, 10
 0000022D			ConvLoop:
 0000022D  99			 cdq
 0000022E  F7 F3		 div ebx
 00000230  66| 83 CA 30		 or dx, 0030h
 00000234  66| 52		 push dx
 00000236  41			 inc ecx
 00000237  83 F8 00		cmp eax, 0
 0000023A  75 F1		jnz ConvLoop

 0000023C  8B D9		mov ebx, ecx

 0000023E  F7 C6 80000000	test esi, 80000000h
 00000244  74 05		jz P2
 00000246  C6 07 2D		 mov BYTE PTR [edi], '-'
 00000249  47			 inc edi
 0000024A  43			 inc ebx
 0000024B			P2:
 0000024B			RevLoop:
 0000024B  66| 58		 pop ax
 0000024D  88 07		 mov [edi], al
 0000024F  47			 inc edi
 00000250  E2 F9		loop RevLoop
 00000252  C6 07 00		mov BYTE PTR [edi], 0

 00000255  8B CB		mov ecx, ebx

 00000257  5F			pop edi
 00000258  5E			pop esi
 00000259  5A			pop edx
 0000025A  5B			pop ebx
 0000025B  58			pop eax

 0000025C  C3			ret
 0000025D			IntToStr ENDP

				END main
Microsoft (R) Macro Assembler Version 14.14.26431.0	    06/18/19 18:57:35
workTim						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002420 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000025D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IntToStr . . . . . . . . . . . .	P Near	 00000214 _TEXT	Length= 00000049 Public STDCALL
  P1 . . . . . . . . . . . . . .	L Near	 00000226 _TEXT	
  ConvLoop . . . . . . . . . . .	L Near	 0000022D _TEXT	
  P2 . . . . . . . . . . . . . .	L Near	 0000024B _TEXT	
  RevLoop  . . . . . . . . . . .	L Near	 0000024B _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Read_a_Line  . . . . . . . . . .	P Near	 000001D5 _TEXT	Length= 0000003F Public STDCALL
  Read_Loop  . . . . . . . . . .	L Near	 000001D7 _TEXT	
  Read_End . . . . . . . . . . .	L Near	 00000210 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001D5 Public STDCALL
  line_loop  . . . . . . . . . .	L Near	 00000033 _TEXT	
  loopperline  . . . . . . . . .	L Near	 00000070 _TEXT	
  notnumber  . . . . . . . . . .	L Near	 00000086 _TEXT	
  callparse  . . . . . . . . . .	L Near	 0000008D _TEXT	
  justbeforeloop . . . . . . . .	L Near	 000000A9 _TEXT	
  loopperline2 . . . . . . . . .	L Near	 000000D6 _TEXT	
  notnumber2 . . . . . . . . . .	L Near	 000000EC _TEXT	
  callparse2 . . . . . . . . . .	L Near	 000000F3 _TEXT	
  justbeforeloop2  . . . . . . .	L Near	 0000010F _TEXT	
  taskloop . . . . . . . . . . .	L Near	 0000011E _TEXT	
  workloop . . . . . . . . . . .	L Near	 00000138 _TEXT	
  notnew . . . . . . . . . . . .	L Near	 00000156 _TEXT	
  cantfinish . . . . . . . . . .	L Near	 0000017E _TEXT	
  printsum . . . . . . . . . . .	L Near	 00000188 _TEXT	
  endfile  . . . . . . . . . . .	L Near	 000001D3 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUF_SIZE . . . . . . . . . . . .	Number	 00000200h   
Byte_Read__  . . . . . . . . . .	DWord	 0000241C _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
Single_Buf__ . . . . . . . . . .	Byte	 0000241B _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blank  . . . . . . . . . . . . .	Byte	 00002410 _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesREAD  . . . . . . . . . . .	DWord	 00000208 _DATA	
bytesWRITE . . . . . . . . . . .	DWord	 0000040C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
diff . . . . . . . . . . . . . .	DWord	 00002415 _DATA	
ent  . . . . . . . . . . . . . .	Byte	 00002419 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inBuf  . . . . . . . . . . . . .	Byte	 00000008 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
outBuf . . . . . . . . . . . . .	Byte	 0000020C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stdinHandle  . . . . . . . . . .	DWord	 00000000 _DATA	
stdoutHandle . . . . . . . . . .	DWord	 00000004 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00002411 _DATA	
task . . . . . . . . . . . . . .	DWord	 00000410 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
work . . . . . . . . . . . . . .	DWord	 00001410 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   1 Errors
